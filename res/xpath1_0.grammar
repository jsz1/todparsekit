/*
    An XPath 1.0 grammar derived from the XPath 1.0 Specification:
 
    http://www.w3.org/TR/xpath

*/

@start = locationPath;

@symbols =  '//'
            '..'
            '!='
            '::'
            '<='
            '>=';


// [1] LocationPath ::= RelativeLocationPath | AbsoluteLocationPath
 
    locationPath = relativeLocationPath | absoluteLocationPath;



// [2] AbsoluteLocationPath ::= '/' RelativeLocationPath? | AbbreviatedAbsoluteLocationPath 

    absoluteLocationPath = '/' relativeLocationPath? | abbreviatedAbsoluteLocationPath;


// [3] RelativeLocationPath ::= Step | RelativeLocationPath '/' Step | AbbreviatedRelativeLocationPath
// avoiding left recursion

    relativeLocationPath = step slashStep* | abbreviatedRelativeLocationPath;


// [4] Step ::= AxisSpecifier NodeTest Predicate* | AbbreviatedStep 
    
    step = axisSpecifier nodeTest predicate* | abbreviatedStep;


// [5] AxisSpecifier ::= AxisName '::' | AbbreviatedAxisSpecifier
    
    axisSpecifier = axisName '::' | abbreviatedAxisSpecifier;


// [6] AxisName ::= 'ancestor' | 'ancestor-or-self' | 'attribute' | 'child' | 'descendant' | 'descendant-or-self'
// | 'following' | 'following-sibling' | 'namespace' | 'parent' | 'preceding' | 'preceding-sibling' | 'self'

    axisName = 'ancestor' | 'ancestor-or-self' | 'attribute' | 'child' | 'descendant' | 'descendant-or-self'
                | 'following' | 'following-sibling' | 'namespace' | 'parent' | 'preceding' | 'preceding-sibling' | 'self';


// [7] NodeTest ::= NameTest | NodeType '(' ')' | 'processing-instruction' '(' Literal ')'
    
    nodeTest = nameTest | nodeType '(' ')' | 'processing-instruction' '(' literal ')';


// [8] Predicate ::= '[' PredicateExpr ']'
    
    predicate = '[' predicateExpr ']';


// [9] PredicateExpr ::= Expr
    
    predicateExpr = expr;


// [10] AbbreviatedAbsoluteLocationPath ::= '//' RelativeLocationPath 
    
    abbreviatedAbsoluteLocationPath = '//' relativeLocationPath;


// [11] AbbreviatedRelativeLocationPath ::= RelativeLocationPath '//' Step 

    abbreviatedRelativeLocationPath = relativeLocationPath '//' step;


// [12] AbbreviatedStep ::= '.' | '..'
    
    abbreviatedStep = '.' | '..';


// [13] AbbreviatedAxisSpecifier ::= '@'?

    abbreviatedAxisSpecifier = '@'?;


// [14] Expr ::= OrExpr 
    
    expr = orExpr;


// [15] PrimaryExpr ::= VariableReference | '(' Expr ')' | Literal | Number | FunctionCall

    primaryExpr = variableReference | '(' expr ')' | literal | Num | functionCall;



// [16] FunctionCall ::= FunctionName '(' ( Argument ( ',' Argument )* )? ')'

    functionCall ::= functionName '(' (argument (',' argument)* )? ')';


// [17] Argument ::= Expr
    
    argument = expr;


// [18] UnionExpr ::= PathExpr | UnionExpr '|' PathExpr
// avoiding Left recursion

    unionExpr = pathExpr ('|' pathExpr)*;


// [19] PathExpr ::= LocationPath 
//  | FilterExpr 
//  | FilterExpr '/' RelativeLocationPath 
//  | FilterExpr '//' RelativeLocationPath 

    pathExpr = locationPath | filterExpr (('/'| '//') relativeLocationPath)?;


// [20] FilterExpr ::= PrimaryExpr | FilterExpr Predicate
// avoiding Left recursion ??

    filterExpr = primaryExpr predicate?


// [21] OrExpr ::= AndExpr | OrExpr 'or' AndExpr
// avoiding Left recursion

    orExpr = andExpr ('or' andExpr)*;


// [22] AndExpr ::= EqualityExpr | AndExpr 'and' EqualityExpr
// avoiding Left recursion

    andExpr = equalityExpr ('and' equalityExpr)*;


// [23] EqualityExpr ::= RelationalExpr | EqualityExpr '=' RelationalExpr | EqualityExpr '!=' RelationalExpr
// avoiding Left recursion

    equalityExpr = relationalExpr (('='|'!=') relationalExpr)?; 
    // TODO repetition or alternation?


// [24] RelationalExpr ::= AdditiveExpr
//  | RelationalExpr '<' AdditiveExpr 
//  | RelationalExpr '>' AdditiveExpr 
//  | RelationalExpr '<=' AdditiveExpr 
//  | RelationalExpr '>=' AdditiveExpr
// avoiding Left recursion

    relationalExpr = additiveExpr ('<' additiveExpr | '>' additiveExpr | '<=' additiveExpr | '>=' additiveExpr)?;


// [25] AdditiveExpr ::= MultiplicativeExpr 
//  | AdditiveExpr '+' MultiplicativeExpr 
//  | AdditiveExpr '-' MultiplicativeExpr 
// avoiding Left recursion

    additiveExpr = multiplicativeExpr ('+' multiplicativeExpr | '-' multiplicativeExpr)?;


// [26] MultiplicativeExpr ::= UnaryExpr 
//  | MultiplicativeExpr MultiplyOperator UnaryExpr 
//  | MultiplicativeExpr 'div' UnaryExpr 
//  | MultiplicativeExpr 'mod' UnaryExpr
// avoiding Left recursion

    multiplicativeExpr = unaryExpr (multiplyOperator unaryExpr | 'div' unaryExpr | 'mod' unaryExpr)?;


// [27] UnaryExpr ::= UnionExpr | '-' UnaryExpr
// avoiding Left recursion

    unaryExpr = '-'? unionExpr;


// [28] ExprToken ::= '(' | ')' | '[' | ']' | '.' | '..' | '@' | ',' | '::'
//  | NameTest 
//  | NodeType 
//  | Operator 
//  | FunctionName 
//  | AxisName 
//  | Literal 
//  | Number 
//  | VariableReference 

    exprToken = '(' | ')' | '[' | ']' | '.' | '..' | '@' | ',' | '::'
        | nameTest 
        | nodeType 
        | operator 
        | functionName 
        | axisName 
        | literal 
        | number
        | variableReference;


// [32] Operator ::= OperatorName | MultiplyOperator | '/' | '//' | '|' | '+' | '-' | '=' | '!=' | '<' | '<=' | '>' | '>=' 

    operator = operatorName | multiplyOperator | '/' | '//' | '|' | '+' | '-' | '=' | '!=' | '<' | '<=' | '>' | '>=';
    

// [33] OperatorName ::= 'and' | 'or' | 'mod' | 'div' 

    operatorName = 'and' | 'or' | 'mod' | 'div';


// [34] MultiplyOperator  ::= '*' 

    multiplyOperator = '*';


// [7] QName ::= PrefixedName| UnprefixedName
// [8] PrefixedName ::= Prefix ':' LocalPart
// [9] UnprefixedName ::= LocalPart
// [10] Prefix ::= NCName
    
    prefix = /[^:]+/;


// [11] LocalPart ::= NCName

    localPart = /[^:]+/;


// [35] FunctionName ::= QName - NodeType 

// [36] VariableReference ::= '$' QName 


// [37] NameTest ::= '*' | NCName ':' '*' | QName 


// [38] NodeType ::= 'comment' 
//  | 'text' 
//  | 'processing-instruction' 
//  | 'node'
