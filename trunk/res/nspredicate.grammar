"""
A Grammar for Apple's NSPredicate String Format Syntax

See: http://developer.apple.com/documentation/Cocoa/Conceptual/Predicates/Articles/pSyntax.html

"""

@wordState = '#';

@symbols = '==' '>=' '=>' '<=' '=<' '!=' '<>' '&&' '||';

@start = expr;

# Expressions
    expr                 = orTerm orOrTerm*;
    orOrTerm             = or orTerm;
    orTerm               = andTerm andAndTerm*;
    andAndTerm           = and andTerm;
    andTerm              = primaryExpr | compoundExpr; 
    compoundExpr         = '('.discard expr ')'.discard;
    primaryExpr          = predicate | negatedPredicate;
    negatedPredicate     = not predicate;

    predicate            = aggregateOp? actualPredicate;
    
    actualPredicate      = boolPredicate | comparisonPredicate | stringTestPredicate | collectionTestPredicate;


# values
    value = keyPath | string | num | bool | array;

    string = QuotedString;
    num = Num;
    bool = true | false;
    true = 'true'.discard;
    false = 'false'.discard;

# arrays
    array = '{'.discard arrayContentsOpt '}'.discard;
    arrayContentsOpt = Empty | arrayContents;
    arrayContents = value commaValue*;
    commaValue = ',' value;


# keyPaths
    keyPath = key dotKey*;
    key = Word;
    dotKey = '.' key;


# Comparison Tests
    comparisonPredicate = comparisonValue comparisonOp comparisonValue;
    comparisonValue = keyPath | num;

    comparisonOp = eq | gt | lt | gtEq | ltEq | notEq | between;

    eq      = '=' | '==';
    gt      = '>';
    lt      = '<';
    gtEq    = '>=' | '=>';
    ltEq    = '<=' | '=<';
    notEq   = '!=' | '<>';
    between = 'BETWEEN';

# Boolean Value Predicates
    boolPredicate  = truePredicate | falsePredicate;

    truePredicate  = 'TRUEPREDICATE'.discard;
    falsePredicate = 'FALSEPREDICATE'.discard;



# Compound Expressions
    and = 'AND'.discard | '&&'.discard;
    or  = 'OR'.discard  | '||'.discard;
    not = 'NOT'.discard | '!'.discard;



# String Tests
    stringTestPredicate = string stringTestOp value;

    stringTestOp = beginswith | contains | endswith | like | matches;

    beginswith  = 'BEGINSWITH';
    contains    = 'CONTAINS';
    endswith    = 'ENDSWITH';
    like        = 'LIKE';
    matches     = 'MATCHES';


# Collection Tests
    collectionTestPredicate = value collectionTestOp collection;
    collection              = keyPath | array;
    collectionTestOp        = in;
    in                      = 'IN';


# Aggregate Operators
    aggregateOp = any | some | all | none;
    any         = 'ANY';
    some        = 'SOME';
    all         = 'ALL';
    none        = 'NONE';

